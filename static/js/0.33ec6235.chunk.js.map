{"version":3,"sources":["../../static/js/0.33ec6235.chunk.js","../../source/pages/Door/components/Blog/libs/markdown/index.js","../../node_modules/_marked@0.4.0@marked/lib/marked.js","../../source/pages/Door/components/Blog/libs/markdown/canvas.js"],"names":["webpackJsonp","2067","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","length","err","Array","isArray","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","_react","_react2","_reactDom","_reactDom2","_marked","_marked2","_canvas","_canvas2","Markdown","_React$Component","this","_this","getPrototypeOf","components","Map","renderer","marked","Renderer","renderDOM","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_step$value","id","component","div","document","getElementById","HTMLElement","ReactDOM","render","return","_this2","html","clear","replace","match","p1","offset","toString","set","React","createElement","Canvas","assign","name","toLowerCase","dangerouslySetInnerHTML","__html","Component","2068","global","root","Lexer","options","tokens","links","defaults","rules","block","normal","pedantic","gfm","tables","InlineLexer","inline","Error","breaks","TextRenderer","Parser","token","escape","encode","unescape","_","n","charAt","String","fromCharCode","parseInt","substring","edit","regex","opt","source","val","getRegex","RegExp","resolveUrl","base","href","baseUrls","test","slice","noop","merge","arguments","hasOwnProperty","splitCells","tableRow","count","cells","split","splice","src","callback","pending","highlight","lex","e","out","parse","type","text","lang","code","escaped","message","silent","newline","fences","hr","heading","nptable","blockquote","list","def","table","lheading","paragraph","_label","_title","bullet","item","_tag","_comment","top","loose","cap","bull","b","space","tag","l","isordered","istask","ischecked","exec","depth","header","align","ordered","start","indexOf","smartLists","join","task","checked","sanitize","pre","sanitizer","title","charCodeAt","autolink","url","link","reflink","nolink","strong","em","br","del","_escapes","_scheme","_email","_attribute","_href","_backpedal","output","mangle","inLink","trim","outputLink","escapes","codespan","smartypants","image","ch","Math","random","langPrefix","quote","level","raw","headerIds","headerPrefix","xhtml","body","listitem","checkbox","tablerow","content","tablecell","flags","prot","decodeURIComponent","baseUrl","originIndependentUrl","encodeURI","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","setOptions","getDefaults","parser","lexer","inlineLexer","window","2069","children","console","log"],"mappings":"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","file":"static/js/0.33ec6235.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 2067:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(10);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _marked = __webpack_require__(2068);\n\nvar _marked2 = _interopRequireDefault(_marked);\n\nvar _canvas = __webpack_require__(2069);\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Markdown = function (_React$Component) {\n  _inherits(Markdown, _React$Component);\n\n  function Markdown(props) {\n    _classCallCheck(this, Markdown);\n\n    var _this = _possibleConstructorReturn(this, (Markdown.__proto__ || Object.getPrototypeOf(Markdown)).call(this, props));\n\n    _this.components = new Map();\n    _this.renderer = new _marked2.default.Renderer();\n    return _this;\n  }\n\n  _createClass(Markdown, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.renderDOM();\n    }\n  }, {\n    key: 'renderDOM',\n    value: function renderDOM() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              id = _step$value[0],\n              component = _step$value[1];\n\n          var div = document.getElementById(id);\n\n          if (div instanceof HTMLElement) {\n            _reactDom2.default.render(component, div);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var html = void 0;\n      var document = this.document();\n      if (typeof document === 'string') {\n        this.components.clear();\n        html = (0, _marked2.default)(document.replace(/:::\\s?demo\\s?([^]+?):::/g, function (match, p1, offset) {\n          var id = offset.toString(36);\n          _this2.components.set(id, _react2.default.createElement(_canvas2.default, Object.assign({\n            name: _this2.constructor.name.toLowerCase()\n          }, _this2.props), p1));\n          return '<div id=' + id + ' class=\"demo-container\"></div>';\n        }, { renderer: this.renderer }));\n      }\n\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement('div', { dangerouslySetInnerHTML: {\n            __html: html\n          } })\n      );\n    }\n  }]);\n\n  return Markdown;\n}(_react2.default.Component);\n\nexports.default = Markdown;\n\n/***/ }),\n\n/***/ 2068:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : ''\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start',\n          task: istask,\n          checked: ischecked\n        });\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('email', inline._email)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|')\n    .getRegex()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      cap[0] = this.rules._backpedal.exec(cap[0])[0];\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n}\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n}\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return text;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return text;\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n}\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n}\n\nTextRenderer.prototype.br = function() {\n  return '';\n}\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  var cells = tableRow.replace(/([^\\\\])\\|/g, '$1 |').split(/ +\\| */),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n}\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (true) {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))\n\n/***/ }),\n\n/***/ 2069:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _marked = __webpack_require__(2068);\n\nvar _marked2 = _interopRequireDefault(_marked);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n// import ReactDOM from 'react-dom'\n// import PropTypes from 'prop-types'\n\n\n// import { transform } from 'babel-standalone'\n// import { LocaleProvider } from 'antd';\n// import zh_CN from 'antd/lib/locale-provider/zh_CN';\n\nvar Canvas = function (_React$Component) {\n  _inherits(Canvas, _React$Component);\n\n  function Canvas(props) {\n    _classCallCheck(this, Canvas);\n\n    // this.playerId = `${parseInt(Math.random() * 1e9).toString(36)}`;\n    var _this = _possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this, props));\n\n    _this.document = _this.props.children.match(/([^]*)\\n?(```[^]+```)/);\n    // this.description = marked(this.document[1]);\n    // this.source = this.document[2].match(/```(.*)\\n?([^]+)```/);\n    console.log(_this.document);\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'div',\n        null,\n        '2222'\n      );\n    }\n  }]);\n\n  return Canvas;\n}(_react2.default.Component);\n\nexports.default = Canvas;\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.33ec6235.chunk.js","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport marked from 'marked';\nimport Canvas from './canvas';\n\nexport default class Markdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.components = new Map;\n    this.renderer = new marked.Renderer();\n  }\n  componentDidMount(){\n    this.renderDOM();\n  }\n  renderDOM() {\n    for (const [id, component] of this.components) {\n      const div = document.getElementById(id);\n\n      if (div instanceof HTMLElement) {\n        ReactDOM.render(component, div);\n      }\n    }\n  }\n  render() {\n    let html;\n    const document = this.document();\n    if (typeof document === 'string') {\n      this.components.clear();\n      html = marked(document.replace(/:::\\s?demo\\s?([^]+?):::/g, (match, p1, offset) => {\n        const id = offset.toString(36);\n        this.components.set(id, React.createElement(Canvas, Object.assign({\n          name: this.constructor.name.toLowerCase()\n        }, this.props), p1));\n        return `<div id=${id} class=\"demo-container\"></div>`;\n      }, { renderer: this.renderer }))\n    }\n\n    return (\n      <div>\n        <div dangerouslySetInnerHTML={{\n          __html: html\n        }} />\n      </div>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./source/pages/Door/components/Blog/libs/markdown/index.js","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : ''\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start',\n          task: istask,\n          checked: ischecked\n        });\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('email', inline._email)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|')\n    .getRegex()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      cap[0] = this.rules._backpedal.exec(cap[0])[0];\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n}\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n}\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return text;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return text;\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n}\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n}\n\nTextRenderer.prototype.br = function() {\n  return '';\n}\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  var cells = tableRow.replace(/([^\\\\])\\|/g, '$1 |').split(/ +\\| */),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n}\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_marked@0.4.0@marked/lib/marked.js\n// module id = 2068\n// module chunks = 0","import React from 'react';\n// import ReactDOM from 'react-dom'\n// import PropTypes from 'prop-types'\nimport marked from 'marked'\n// import { transform } from 'babel-standalone'\n// import { LocaleProvider } from 'antd';\n// import zh_CN from 'antd/lib/locale-provider/zh_CN';\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.playerId = `${parseInt(Math.random() * 1e9).toString(36)}`;\n    this.document = this.props.children.match(/([^]*)\\n?(```[^]+```)/);\n    // this.description = marked(this.document[1]);\n    // this.source = this.document[2].match(/```(.*)\\n?([^]+)```/);\n    console.log(this.document)\n  }\n  render(){\n    return (\n      <div>\n        2222\n      </div>\n    )\n  }\n}\nexport default Canvas;\n\n\n// WEBPACK FOOTER //\n// ./source/pages/Door/components/Blog/libs/markdown/canvas.js"],"sourceRoot":""}